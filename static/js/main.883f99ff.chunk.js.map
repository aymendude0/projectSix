{"version":3,"sources":["JokeHeader.js","firebase.js","Vote.js","JokeEntry.js","RandomJoke.js","JokeFooter.js","VoteOldJoke.js","App.js","serviceWorker.js","index.js"],"names":["JokeHeader","className","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Vote","handleUpVote","jokeId","props","upVoteJoke","handleDownVote","downVoteJoke","sortArray","jokesArray","jokes","sort","jokeA","jokeB","totalVotesA","upvotes","downvotes","totalVotesB","addVoteColor","index","this","parent","map","joke","totalVotes","key","id","created_on","author","onClick","icon","faThumbsUp","faThumbsDown","JokeEntry","newJokes","state","newJoke","database","ref","child","set","setState","handleChange","event","target","jokeInput","value","nameInput","submitForm","preventDefault","match","currentDate","Date","toDateString","push","alert","on","snapshot","data","val","newJokesArray","propertyName","record","reverse","slice","onSubmit","action","htmlFor","placeholder","onChange","rows","cols","minLength","maxLength","required","type","RandomJoke","randomJoke","isGeneratingJoke","onGenerateJoke","bind","axios","method","url","responseType","headers","Accept","then","res","generateJoke","disabled","JokeFooter","VoteOldJoke","getJokes","dbRef","newArray","userDate","filter","jokeDate","toISOString","substr","submitDate","getDate","resetForm","for","length","App","to","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yQAceA,E,uKAVX,OACE,gCACE,yBAAKC,UAAU,WACb,wBAAIA,UAAU,gBAAd,0B,GALeC,a,uBCazBC,IAASC,cAVc,CACnBC,OAAQ,0CACRC,WAAY,uCACZC,YAAa,8CACbC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,8CAOIR,QAAf,E,wBCkEeS,E,4MA7EbC,aAAe,SAACC,GACd,EAAKC,MAAMC,WAAWF,I,EAIxBG,eAAiB,SAACH,GAChB,EAAKC,MAAMG,aAAaJ,I,EAO1BK,UAAY,WAEV,IAAIC,EAAU,YAAO,EAAKL,MAAMM,OAahC,OAZAD,EAAWE,MAAK,SAACC,EAAOC,GACtB,IAAMC,EAAcF,EAAMG,QAAUH,EAAMI,UACpCC,EAAcJ,EAAME,QAAUF,EAAMG,UAC1C,OAAIC,EAAcH,GACR,EACCG,EAAcH,EAChB,EAEA,KAIJL,G,EAGTS,aAAe,SAACC,GAChB,OAAIA,EAAQ,EACH,cAEH,aAAN,OAAoBA,I,uDAGV,IAAD,OACHV,EAAa,GAOjB,OALEA,EADwB,cAAtBW,KAAKhB,MAAMiB,OACAD,KAAKhB,MAAMM,MAEXU,KAAKZ,YAIlB,yBAAKlB,UAAU,aACb,wBAAIA,UAAU,iBAEVmB,EAAWa,KAAK,SAACC,EAAMJ,GACrB,IAAMK,EAAaD,EAAKR,QAAUQ,EAAKP,UACvC,OACI,wBAAIS,IAAKF,EAAKG,GAAIpC,UAAW,EAAK4B,aAAaC,IAC7C,yBAAK7B,UAAU,eACb,4BAAKiC,EAAKI,YACV,2BAAIJ,EAAKA,OAGX,yBAAKjC,UAAU,cAAf,IAA6B,mCAASiC,EAAKK,OAAd,KAA7B,IAAwD,0CAAgBJ,IAExE,yBAAKlC,UAAU,eACb,4BAAQuC,QAAS,kBAAM,EAAK3B,aAAaqB,EAAKG,KAAKA,GAAIH,EAAKG,IAAI,kBAAC,IAAD,CAAiBI,KAAMC,OACvF,4BAAQF,QAAS,kBAAM,EAAKvB,eAAeiB,EAAKG,KAAKA,GAAIH,EAAKG,IAAI,kBAAC,IAAD,CAAiBI,KAAME,kB,GAlE5FzC,aC6IJ0C,E,kDA5Ib,WAAY7B,GAAQ,IAAD,8BACjB,cAAMA,IAURC,WAAa,SAACF,GACZ,IAAM+B,EAAW,EAAKC,MAAMzB,MAAMY,KAAK,SAACC,GACtC,GAAIA,EAAKG,KAAOvB,EACd,OAAOoB,EAGT,IAAMa,EAAU,CACdV,GAAIvB,EACJyB,OAAQL,EAAKK,OACbL,KAAMA,EAAKA,KACXI,WAAYJ,EAAKI,WACjBZ,QAASQ,EAAKR,QAAU,EACxBC,UAAWO,EAAKP,WASlB,OALgBxB,EAAS6C,WAAWC,IAAInC,GAGhCoC,MAAM,WAAWC,IAAIJ,EAAQrB,SAE9BqB,KAGT,EAAKK,SAAS,CAAC/B,MAAOwB,KAnCL,EAuCnB3B,aAAe,SAACJ,GACd,IAAM+B,EAAW,EAAKC,MAAMzB,MAAMY,KAAI,SAACC,GACrC,GAAIA,EAAKG,KAAOvB,EACd,OAAOoB,EAGT,IAAMa,EAAU,CACdV,GAAIH,EAAKG,GACTE,OAAQL,EAAKK,OACbL,KAAMA,EAAKA,KACXI,WAAYJ,EAAKI,WACjBZ,QAASQ,EAAKR,QACdC,UAAWO,EAAKP,UAAY,GAQ9B,OAJgBxB,EAAS6C,WAAWC,IAAInC,GAGhCoC,MAAM,aAAaC,IAAIJ,EAAQpB,WAChCoB,KAGT,EAAKK,SAAS,CAAE/B,MAAOwB,KA9DN,EA+FnBQ,aAAe,SAACC,GACU,YAApBA,EAAMC,OAAOlB,GACf,EAAKe,SAAS,CACZI,UAAWF,EAAMC,OAAOE,QAG1B,EAAKL,SAAS,CACZM,UAAWJ,EAAMC,OAAOE,SAtGX,EA4GnBE,WAAa,SAACL,GAEZ,GADAA,EAAMM,iBACD,EAAKd,MAAMU,UAAUK,MAAM,cAAiB,EAAKf,MAAMY,UAAUG,MAAM,aAA5E,CAKA,IAAMC,GAAc,IAAIC,MAAOC,eAGjB7D,EAAS6C,WAAWC,MAC5BgB,KAAK,CAAE1B,OAAQ,EAAKO,MAAMY,UAAWpB,WAAYwB,EAAa5B,KAAM,EAAKY,MAAMU,UAAW9B,QAAS,EAAGC,UAAW,SARrHuC,MAAM,mCA5GR,EAAKpB,MAAQ,CACXzB,MAAO,GACPmC,UAAW,GACXE,UAAW,IANI,E,gEAkEE,IAAD,OACJvD,EAAS6C,WAAWC,MAC5BkB,GAAG,SAAS,SAACC,GACjB,IAAMC,EAAOD,EAASE,MAChBC,EAAgB,GAGtB,IAAK,IAAIC,KAAgBH,EAAM,CAC7B,IAAMI,EAASJ,EAAKG,GACdzB,EAAU,CACdV,GAAImC,EACJjC,OAAQkC,EAAOlC,OACfL,KAAMuC,EAAOvC,KACbI,WAAYmC,EAAOnC,WACnBZ,QAAS+C,EAAO/C,QAChBC,UAAW8C,EAAO9C,WAGpB4C,EAAcN,KAAKlB,GAErBwB,EAAcG,UACd,EAAKtB,SAAS,CAEZ/B,MAAOkD,EAAcI,MAAM,EAAG,W,+BAmClC,OACE,6BACG,0BAAMC,SAAU7C,KAAK4B,WAAYkB,OAAO,UACrC,2BAAOC,QAAQ,WAAf,6BACA,8BAAUC,YAAY,uBAAuBC,SAAUjD,KAAKsB,aAAe4B,KAAK,IAAIC,KAAK,KAAKC,UAAU,IAAIC,UAAU,MAAM/C,GAAG,UAAUgD,UAAQ,IACjJ,2BAAOP,QAAQ,WAAf,oCACA,2BAAOC,YAAY,uBAAuBC,SAAUjD,KAAKsB,aAAc+B,UAAU,KAAKE,KAAK,OAAOjD,GAAG,SAASgD,UAAQ,IACtH,4BAAQpF,UAAU,cAAlB,aAEF,wBAAIA,UAAU,YAAd,8BACA,kBAAC,EAAD,CAAM+B,OAAO,YAAYX,MAAOU,KAAKe,MAAMzB,MAAOL,WAAYe,KAAKf,WAAYE,aAAca,KAAKb,oB,GAxIpFhB,a,yBCoDTqF,E,kDAlDX,aAAe,IAAD,8BACV,gBAHJC,WAAa,KAIT,EAAK1C,MAAQ,CAET2C,kBAAkB,GAEtB,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBANZ,E,gEAUV5D,KAAK2D,mB,qCAIO,IAAD,OACX3D,KAAKqB,SAAS,CAAEqC,kBAAkB,IAElCG,IAAM,CACFC,OAAQ,MACRC,IAAK,8BACLC,aAAc,OACdC,QAAS,CACLC,OAAQ,sBAGfC,MAAK,SAACC,GACH,EAAK/C,SACD,CACIoC,WAAYW,EAAI9B,KAAKnC,KACrBuD,kBAAkB,S,uCAM9B1D,KAAKqE,iB,+BAIL,OACI,yBAAKnG,UAAU,uBACX,qDACA,4BAAQA,UAAU,gBAAgBuC,QAAST,KAAK2D,eAAgBW,SAAUtE,KAAKe,MAAM2C,kBAArF,kBAEA,uBAAGxF,UAAU,oBAAoB8B,KAAKe,MAAM2C,iBAAmB,4BAA8B1D,KAAKe,MAAM0C,iB,GA/C/FtF,aCUVoG,E,uKATX,OACE,gCACE,kDACA,8F,GALiBpG,aC4JVqG,E,kDAxJX,WAAYxF,GAAQ,IAAD,8BACf,cAAMA,IAcRC,WAAa,SAACF,GACZ,IAAM+B,EAAW,EAAKC,MAAMzB,MAAMY,KAAK,SAACC,GACtC,GAAIA,EAAKG,KAAOvB,EACd,OAAOoB,EAGT,IAAMa,EAAU,CACdV,GAAIvB,EACJyB,OAAQL,EAAKK,OACbL,KAAMA,EAAKA,KACXI,WAAYJ,EAAKI,WACjBZ,QAASQ,EAAKR,QAAU,EACxBC,UAAWO,EAAKP,WAUtB,OANoBxB,EAAS6C,WAAWC,IAAInC,GAIpCoC,MAAM,WAAWC,IAAIJ,EAAQrB,SAE9BqB,KAGT,EAAKK,SAAS,CAAC/B,MAAOwB,KAxCH,EA4CrB3B,aAAe,SAACJ,GACd,IAAM+B,EAAW,EAAKC,MAAMzB,MAAMY,KAAI,SAACC,GACrC,GAAIA,EAAKG,KAAOvB,EACd,OAAOoB,EAGT,IAAMa,EAAU,CACdV,GAAIH,EAAKG,GACTE,OAAQL,EAAKK,OACbL,KAAMA,EAAKA,KACXI,WAAYJ,EAAKI,WACjBZ,QAASQ,EAAKR,QACdC,UAAWO,EAAKP,UAAY,GAQ9B,OAJgBxB,EAAS6C,WAAWC,IAAInC,GAGhCoC,MAAM,aAAaC,IAAIJ,EAAQpB,WAChCoB,KAGT,EAAKK,SAAS,CAAE/B,MAAOwB,KAnEJ,EAsEnB2D,SAAW,WACP,EAAKpD,SAAS,CACV/B,MAAO,KAEX,IAAMoF,EAAQtG,EAAS6C,WAAWC,MAC5BsB,EAAgB,GACtBkC,EAAMtC,GAAG,SAAS,SAACC,GACjB,IAAMC,EAAOD,EAASE,MAKtB,IAAK,IAAIE,KAAgBH,EAAM,CAC7B,IAAMI,EAASJ,EAAKG,GACdzB,EAAU,CACdV,GAAImC,EACJjC,OAAQkC,EAAOlC,OACfL,KAAMuC,EAAOvC,KACbI,WAAYmC,EAAOnC,WACnBZ,QAAS+C,EAAO/C,QAChBC,UAAW8C,EAAO9C,WAGpB4C,EAAcN,KAAKlB,GAGvB,IAAI2D,EAAWnC,EACa,KAAxB,EAAKzB,MAAM6D,WACXD,EAAWnC,EAAcqC,QAAO,SAAC1E,GACjC,IAAI2E,EAAW,IAAI9C,KAAK7B,EAAKI,YAE7B,OADAuE,EAAWA,EAASC,cAAcC,OAAO,EAAE,OACvB,EAAKjE,MAAM6D,aAKnC,EAAKvD,SAAS,CACV/B,MAAOqF,QA3GI,EAiHnBM,WAAa,SAAC1D,GACVA,EAAMM,iBACN,EAAK4C,YAnHU,EAsHnBS,QAAU,SAAC3D,GACP,EAAKF,SAAS,CACVuD,SAAUrD,EAAMC,OAAOE,SAxHZ,EA4HnByD,UAAY,SAAC5D,GACT,EAAKF,SAAS,CACVuD,SAAU,KACX,WACC,EAAKH,eA7HT,EAAK1D,MAAQ,CACXzB,MAAO,GACPsF,SAAU,IALG,E,gEAWf5E,KAAKyE,a,+BA0HL,OACI,yBAAKvG,UAAU,wBACX,0BAAM2E,SAAU7C,KAAKiF,YACjB,2BAAOG,KAAG,GAAV,iBACA,2BAAOnC,SAAUjD,KAAKkF,QAAS3B,KAAK,SACpC,4BAAQA,KAAK,UAAb,UACA,4BAAQ9C,QAAST,KAAKmF,UAAW5B,KAAK,SAAtC,wBAEyB,IAA5BvD,KAAKe,MAAMzB,MAAM+F,OAAa,wBAAInH,UAAU,aAAd,mDAC/B,6BACI,wBAAIA,UAAU,YAAd,8BAAwD,kBAAC,EAAD,CAAM+B,OAAO,cAAcX,MAAOU,KAAKe,MAAMzB,MAAOL,WAAYe,KAAKf,WAAYE,aAAca,KAAKb,qB,GAjJtJhB,a,eC0CXmH,G,6KA/BX,OACE,kBAAC,IAAD,KACE,yBAAKpH,UAAU,OACb,yBAAKA,UAAU,WACb,kBAAC,EAAD,MACA,gCACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMqH,GAAG,kBAAT,gBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,aAAT,aAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,iBAAT,uBAKR,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAW7E,IACzC,kBAAC,IAAD,CAAO2E,OAAK,EAACC,KAAK,gBAAgBC,UAAWlB,IAC7C,kBAAC,IAAD,CAAOiB,KAAK,iBAAiBD,OAAK,EAACE,UAAWlC,IAC9C,kBAAC,EAAD,a,GA1BMrF,cCAEwH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAShE,MACvB,2DCZNiE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.883f99ff.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass JokeHeader extends Component {\r\n  render() {\r\n    return (\r\n      <header>\r\n        <div className=\"appHead\">\r\n          <h1 className=\"dadJokesHead\">The Joke Factory</h1>\r\n        </div>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default JokeHeader;","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAsZzlfleBeT9bzHKQrOQS1ow9n4156J2o\",\r\n    authDomain: \"joke-generator-4248a.firebaseapp.com\",\r\n    databaseURL: \"https://joke-generator-4248a.firebaseio.com\",\r\n    projectId: \"joke-generator-4248a\",\r\n    storageBucket: \"joke-generator-4248a.appspot.com\",\r\n    messagingSenderId: \"250719953187\",\r\n    appId: \"1:250719953187:web:fea752e43d0798e812ec96\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n\r\n\r\nexport default firebase;","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faThumbsUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { faThumbsDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass Vote extends Component {\r\n\r\n  // calling the function (upVoteJoke) to increment the joke at this specific id\r\n  handleUpVote = (jokeId) => {\r\n    this.props.upVoteJoke(jokeId);\r\n  }\r\n\r\n  // calling the function (downVoteJoke) to increment the joke at this specific id\r\n  handleDownVote = (jokeId) => {\r\n    this.props.downVoteJoke(jokeId);\r\n  }\r\n\r\n\r\n\r\n  // sorting the array of jokes in descending order by total number of votes (upvotes - downvotes)\r\n\r\n  sortArray = () => {\r\n    \r\n    let jokesArray = [...this.props.jokes];\r\n    jokesArray.sort((jokeA, jokeB) => {\r\n      const totalVotesA = jokeA.upvotes - jokeA.downvotes;\r\n      const totalVotesB = jokeB.upvotes - jokeB.downvotes;\r\n      if (totalVotesB < totalVotesA) {\r\n        return -1;\r\n      } else if (totalVotesB > totalVotesA) {\r\n        return 1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    \r\n    return jokesArray;\r\n  }\r\n\r\n  addVoteColor = (index) => {\r\n  if (index > 4) {\r\n    return \"jokeLeader4\";\r\n  } \r\n  return `jokeLeader${index}`;\r\n  }\r\n\r\n  render() {\r\n    let jokesArray = [];\r\n    if (this.props.parent === \"jokeEntry\") {\r\n      jokesArray = this.props.jokes;\r\n    } else {\r\n      jokesArray = this.sortArray();\r\n    }\r\n\r\n    return (\r\n      <div className=\"jokeBoard\">\r\n        <ul className=\"jokeContainer\">\r\n          {\r\n            jokesArray.map( (joke, index) => {\r\n              const totalVotes = joke.upvotes - joke.downvotes;\r\n              return ( \r\n                  <li key={joke.id} className={this.addVoteColor(index)} >\r\n                    <div className=\"cardWrapper\">\r\n                      <h2>{joke.created_on}</h2>\r\n                      <p>{joke.joke}</p>\r\n                    </div>\r\n\r\n                    <div className=\"jokeDetail\"> <p> By: {joke.author} </p> <p>Total Votes:{totalVotes}</p></div>\r\n\r\n                    <div className=\"buttonStyle\">\r\n                      <button onClick={() => this.handleUpVote(joke.id)} id={joke.id}><FontAwesomeIcon icon={faThumbsUp} /></button>\r\n                      <button onClick={() => this.handleDownVote(joke.id)} id={joke.id}><FontAwesomeIcon icon={faThumbsDown} /></button> \r\n                    </div>\r\n                  </li>\r\n                )\r\n              }\r\n            )\r\n          }\r\n        </ul> \r\n         \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Vote;","import React, { Component } from 'react';\r\nimport firebase from './firebase';\r\nimport Vote from './Vote';\r\n\r\nclass JokeEntry extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { \r\n      jokes: [],\r\n      jokeInput: \"\",\r\n      nameInput: \"\"\r\n    };\r\n  }\r\n\r\n  // a function to increment the number of upvotes\r\n  upVoteJoke = (jokeId) => {\r\n    const newJokes = this.state.jokes.map( (joke) => {\r\n      if (joke.id !== jokeId) {\r\n        return joke;\r\n      }\r\n      //update and create new joke array with new value for downvotes\r\n      const newJoke = {\r\n        id: jokeId,\r\n        author: joke.author,\r\n        joke: joke.joke,\r\n        created_on: joke.created_on,\r\n        upvotes: joke.upvotes + 1,\r\n        downvotes: joke.downvotes\r\n      };\r\n\r\n      // get the joke at this id\r\n      const jokeRef = firebase.database().ref(jokeId); \r\n\r\n      //update the upvotes property of this joke in firebase\r\n      jokeRef.child('upvotes').set(newJoke.upvotes);\r\n\r\n      return newJoke;\r\n    });\r\n\r\n    this.setState({jokes: newJokes});\r\n  }\r\n\r\n    //function to increment the number of downvotes on jokes \r\n  downVoteJoke = (jokeId) => {\r\n    const newJokes = this.state.jokes.map((joke) => {\r\n      if (joke.id !== jokeId) {\r\n        return joke;\r\n      }\r\n      //update and create new joke array with new value for downvotes\r\n      const newJoke = {\r\n        id: joke.id,\r\n        author: joke.author,\r\n        joke: joke.joke,\r\n        created_on: joke.created_on,\r\n        upvotes: joke.upvotes,\r\n        downvotes: joke.downvotes + 1\r\n      };\r\n\r\n      // get the joke at this id\r\n      const jokeRef = firebase.database().ref(jokeId); \r\n\r\n      //update the downvotes property of this joke in firebase\r\n      jokeRef.child('downvotes').set(newJoke.downvotes);\r\n      return newJoke;\r\n    });\r\n\r\n    this.setState({ jokes: newJokes });\r\n  }\r\n\r\n  // pulling all jokes from firebase to display on page\r\n  componentDidMount() {\r\n    const dbRef = firebase.database().ref();\r\n    dbRef.on('value', (snapshot) => {\r\n      const data = snapshot.val();\r\n      const newJokesArray = [];\r\n\r\n      //restructuring data from firebase into our joke object in order to set state for jokes coming back from firebase\r\n      for (let propertyName in data) {\r\n        const record = data[propertyName];\r\n        const newJoke = {\r\n          id: propertyName,\r\n          author: record.author,\r\n          joke: record.joke,\r\n          created_on: record.created_on,\r\n          upvotes: record.upvotes,\r\n          downvotes: record.downvotes\r\n        }\r\n\r\n        newJokesArray.push(newJoke)\r\n      }\r\n      newJokesArray.reverse();\r\n      this.setState({\r\n\r\n        jokes: newJokesArray.slice(0, 12)\r\n      });\r\n    })\r\n  }\r\n\r\n  // function to grab user input in joke input field, and name input field\r\n  handleChange = (event) => {\r\n    if (event.target.id === \"newJoke\") {\r\n      this.setState({\r\n        jokeInput: event.target.value\r\n      }) \r\n    } else {\r\n      this.setState({\r\n        nameInput: event.target.value\r\n      })\r\n    }\r\n  }\r\n\r\n  // pushing data from joke form to firebase\r\n  submitForm = (event) => {\r\n    event.preventDefault();\r\n    if (!this.state.jokeInput.match(/^[a-z]+/gi) || !this.state.nameInput.match(/^[a-z]+/gi)){\r\n      alert(\"Please fill in all text fields\");\r\n      return;\r\n    }\r\n\r\n    const currentDate = new Date().toDateString();\r\n    \r\n\r\n    const dbRef = firebase.database().ref();\r\n    dbRef.push({ author: this.state.nameInput, created_on: currentDate, joke: this.state.jokeInput, upvotes: 0, downvotes: 0 })\r\n  }\r\n\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n         <form onSubmit={this.submitForm} action=\"submit\">\r\n            <label htmlFor=\"newJoke\">Got a joke? Let's hear it</label>\r\n            <textarea placeholder=\"Input your joke here\" onChange={this.handleChange}  rows=\"5\" cols=\"50\" minLength=\"6\" maxLength=\"200\" id=\"newJoke\" required/> \r\n            <label htmlFor=\"newJoke\">Who's posting? (incase it sucks)</label>\r\n            <input placeholder=\"Input your name here\" onChange={this.handleChange} maxLength=\"20\" type=\"text\" id=\"author\" required />       \r\n            <button className=\"addJokeBtn\">Add Joke</button>  \r\n          </form>\r\n          <h2 className=\"mainRate\">Rate which jokes are best!</h2>\r\n          <Vote parent=\"jokeEntry\" jokes={this.state.jokes} upVoteJoke={this.upVoteJoke} downVoteJoke={this.downVoteJoke}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default JokeEntry;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass RandomJoke extends Component {\r\n    randomJoke = null;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            //randomJoke = null,\r\n            isGeneratingJoke: false\r\n        };\r\n        this.onGenerateJoke = this.onGenerateJoke.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.onGenerateJoke();\r\n    }\r\n\r\n    //generate a joke\r\n    generateJoke() {\r\n        this.setState({ isGeneratingJoke: true })\r\n\r\n        axios({\r\n            method: 'GET',\r\n            url: 'https://icanhazdadjoke.com/',\r\n            responseType: 'json',\r\n            headers: {\r\n                Accept: \"application/json\" //this will retrieve json data\r\n            }\r\n        })\r\n        .then((res) => {\r\n            this.setState(\r\n                {\r\n                    randomJoke: res.data.joke,\r\n                    isGeneratingJoke: false\r\n                })\r\n        });\r\n    }\r\n\r\n    onGenerateJoke() {\r\n        this.generateJoke();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"randomJokeContainer\">\r\n                <h1>Random Joke Generator</h1>\r\n                <button className=\"randomJokeBtn\" onClick={this.onGenerateJoke} disabled={this.state.isGeneratingJoke}>Tell me a joke</button>\r\n\r\n                <p className=\"randomJokeResult\">{this.state.isGeneratingJoke ? \"Generating random joke...\" : this.state.randomJoke}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RandomJoke;\r\n\r\n","import React, { Component } from 'react';\r\n\r\nclass JokeFooter extends Component {\r\n  render() {\r\n    return (\r\n      <footer>\r\n        <p>Copyright © 2020</p>\r\n        <p>The Joke Factory: Aymen Mahmod, Saud Khoja, Kristen Scheel</p>\r\n      </footer>\r\n    )\r\n  }\r\n}\r\n\r\nexport default JokeFooter;","import React, { Component } from 'react';\r\nimport Vote from \"./Vote\";\r\nimport firebase from './firebase';\r\n\r\nclass VoteOldJoke extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = { \r\n          jokes: [],\r\n          userDate: \"\",\r\n          \r\n        };\r\n      }\r\n\r\n      componentDidMount() {\r\n        this.getJokes();\r\n      }\r\n    \r\n      // a function to increment the number of upvotes\r\n      upVoteJoke = (jokeId) => {\r\n        const newJokes = this.state.jokes.map( (joke) => {\r\n          if (joke.id !== jokeId) {\r\n            return joke;\r\n          }\r\n          //update and create new joke array with new value for downvotes\r\n          const newJoke = {\r\n            id: jokeId,\r\n            author: joke.author,\r\n            joke: joke.joke,\r\n            created_on: joke.created_on,\r\n            upvotes: joke.upvotes + 1,\r\n            downvotes: joke.downvotes\r\n          };\r\n    \r\n          // get the joke at this id\r\n          const jokeRef = firebase.database().ref(jokeId); \r\n\r\n    \r\n      //update the upvotes property of this joke in firebase\r\n      jokeRef.child('upvotes').set(newJoke.upvotes);\r\n\r\n      return newJoke;\r\n    });\r\n\r\n    this.setState({jokes: newJokes});\r\n  }\r\n\r\n    //function to increment the number of downvotes on jokes \r\n  downVoteJoke = (jokeId) => {\r\n    const newJokes = this.state.jokes.map((joke) => {\r\n      if (joke.id !== jokeId) {\r\n        return joke;\r\n      }\r\n      //update and create new joke array with new value for downvotes\r\n      const newJoke = {\r\n        id: joke.id,\r\n        author: joke.author,\r\n        joke: joke.joke,\r\n        created_on: joke.created_on,\r\n        upvotes: joke.upvotes,\r\n        downvotes: joke.downvotes + 1\r\n      };\r\n\r\n      // get the joke at this id\r\n      const jokeRef = firebase.database().ref(jokeId); \r\n\r\n      //update the downvotes property of this joke in firebase\r\n      jokeRef.child('downvotes').set(newJoke.downvotes);\r\n      return newJoke;\r\n    });\r\n\r\n    this.setState({ jokes: newJokes });\r\n  }\r\n \r\n    getJokes = () => {\r\n        this.setState({\r\n            jokes: []\r\n        })\r\n        const dbRef = firebase.database().ref();\r\n        const newJokesArray = [];\r\n        dbRef.on('value', (snapshot) => {\r\n          const data = snapshot.val();\r\n\r\n            \r\n          //restructuring data from firebase into our joke object in order to set state for jokes coming back from firebase\r\n\r\n          for (let propertyName in data) {\r\n            const record = data[propertyName];\r\n            const newJoke = {\r\n              id: propertyName,\r\n              author: record.author,\r\n              joke: record.joke,\r\n              created_on: record.created_on,\r\n              upvotes: record.upvotes,\r\n              downvotes: record.downvotes\r\n            }\r\n    \r\n            newJokesArray.push(newJoke)\r\n          }\r\n\r\n        let newArray = newJokesArray;\r\n        if (this.state.userDate !== \"\") {\r\n            newArray = newJokesArray.filter((joke) => {\r\n            let jokeDate = new Date(joke.created_on)\r\n            jokeDate = jokeDate.toISOString().substr(0,10);\r\n            return jokeDate === this.state.userDate;\r\n            }) \r\n        }\r\n\r\n\r\n        this.setState({\r\n            jokes: newArray\r\n          });\r\n        })\r\n    }\r\n\r\n\r\n    submitDate = (event) => {\r\n        event.preventDefault();\r\n        this.getJokes();\r\n    }\r\n\r\n    getDate = (event) => {\r\n        this.setState({\r\n            userDate: event.target.value\r\n        })\r\n    }\r\n\r\n    resetForm = (event) => {        \r\n        this.setState({\r\n            userDate: \"\",\r\n        }, () => {\r\n            this.getJokes();\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"randomOtherContainer\">\r\n                <form onSubmit={this.submitDate}>\r\n                    <label for>Choose a date</label>\r\n                    <input onChange={this.getDate} type=\"date\"/>\r\n                    <button type=\"submit\">Submit</button>\r\n                    <button onClick={this.resetForm} type=\"reset\">Back to Leaderboard</button>\r\n                </form>\r\n                {this.state.jokes.length === 0?<h2 className=\"errorText\">No joke for this day, please select another day</h2>:\r\n                <div>\r\n                    <h2 className=\"rateText\">Rate which jokes are best!</h2><Vote parent=\"voteOldJoke\" jokes={this.state.jokes} upVoteJoke={this.upVoteJoke} downVoteJoke={this.downVoteJoke}/>\r\n                </div>\r\n            }\r\n            </div>\r\n        )\r\n    }\r\n    }\r\n\r\n\r\nexport default VoteOldJoke;","import React, { Component } from 'react';\r\nimport JokeHeader from './JokeHeader';\r\nimport JokeEntry from './JokeEntry';\r\nimport RandomJoke from './RandomJoke';\r\nimport JokeFooter from './JokeFooter';\r\nimport VoteOldJoke from './VoteOldJoke'\r\nimport {\r\n  HashRouter as Router,\r\n  Route, Link } from 'react-router-dom';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n\r\nrender() {\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n          <div className=\"wrapper\">\r\n            <JokeHeader />\r\n            <header>\r\n              <nav>\r\n                <ul>\r\n                  <li>\r\n                    <Link to=\"/generateJoke/\">Random Joke</Link>\r\n                  </li>\r\n                  <li>\r\n                    <Link to=\"/addJoke/\">Add Joke</Link>\r\n                  </li>\r\n                  <li>\r\n                    <Link to=\"/voteForJoke/\">Vote for a Joke</Link>\r\n                  </li>\r\n                </ul>\r\n              </nav>\r\n            </header>\r\n            <Route exact path=\"/addJoke/\" component={JokeEntry} />\r\n            <Route exact path=\"/voteForJoke/\" component={VoteOldJoke} />\r\n            <Route path=\"/generateJoke/\" exact component={RandomJoke} />\r\n            <JokeFooter />\r\n          </div>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}